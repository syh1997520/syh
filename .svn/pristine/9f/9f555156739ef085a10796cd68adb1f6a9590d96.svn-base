package com.qlgshopping.controller;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;










import com.google.gson.Gson;
import com.qlgshopping.entity.MapModel;
import com.qlgshopping.entity.OrderInfo;
import com.qlgshopping.entity.OrderTable;
import com.qlgshopping.entity.Product;
import com.qlgshopping.entity.ReceiveAddress;
import com.qlgshopping.entity.UserInfo;
import com.qlgshopping.service.OrderInfoService;
import com.qlgshopping.service.OrderTableService;
import com.qlgshopping.service.ProductService;
import com.qlgshopping.service.ReceiveAddressService;
import com.qlgshopping.utils.QRCodeUtil;
import com.qlgshopping.utils.TimeTransfer;

public class OrderTableServlet extends HttpServlet {
	private OrderTableService odSe=new OrderTableService();
	private OrderInfoService odifSe=new OrderInfoService();
	private ReceiveAddressService reSe=new ReceiveAddressService();
	private ProductService proSe=new ProductService();
	/**
	 * Constructor of the object.
	 */
	public OrderTableServlet() {
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		this.doPost(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String op=request.getParameter("op");
		if(op.equals("allorder")){
			loadAllOrder(request, response);
		}
		else if(op.equals("unpay")){
			loadUnPayOrder(request, response);
		}
		else if(op.equals("noeva")){
			loadNoEvaluteOrder(request, response);
		}
		else if(op.equals("loadorderbyid")){
			loadOrderById(request, response);
		}
		else if(op.equals("loadordermany")){
			cartToOrder(request, response);
		}
		else if(op.equals("gotoevalute")){
			gotoEvalute(request, response);
		}
		else if(op.equals("getpayphoto")){
			getPayPhoto(request, response);
		}
		else if(op.equals("buydirect")){
			buyDirect(request, response);
		}
	}
	
	public void buyDirect(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		int proId=Integer.parseInt(request.getParameter("proId"));
		UserInfo user=(UserInfo)request.getSession().getAttribute("user");
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Product product = proSe.selectProductByProId(proId);
		OrderTable orderTable=new OrderTable();
		orderTable.setStoId(product.getStoId());
		orderTable.setUserId(user.getUserId());
		orderTable.setOrdPrice(0);
		orderTable.setOrdTime(sdf.format(new Date()));
		orderTable.setOrdStatic("未付款");
		int insertId = odSe.insertOrderTable(orderTable);
		OrderInfo odif=new OrderInfo();
		odif.setOrdId(insertId);
		odif.setProId(proId);
		odif.setProNumber(Integer.parseInt(request.getParameter("pronumber")));
		odif.setOdifPrice(product.getProPrice()*odif.getProNumber());
		odif.setOdifEvaluate(0);
		odifSe.insertOrderinfo(odif);
		OrderTable selectByOrderId = odSe.selectByOrderId(insertId);
		ArrayList<OrderTable> odtableList=new ArrayList<>();
		orderTable.setOrdId(insertId);
		odtableList.add(selectByOrderId);
		request.setAttribute("odtablelist", odtableList);
		request.getRequestDispatcher("chooseAddress3.jsp").forward(request, response);
	}
	
	/**
	 * 根据传入的订单详情生成地址信息
	 * @param request
	 * @param response
	 * @throws IOException 
	 * @throws ServletException 
	 * @throws Exception 
	 */
	public void getPayPhoto(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//购买商品后的事情
		ArrayList<OrderTable> orderList=new ArrayList<>();
		ArrayList<Integer> odList=new ArrayList<>();
		SimpleDateFormat idf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String[] parameterValues2 = request.getParameterValues("oderid");
		int addId=Integer.parseInt(request.getParameter("addressid")); 
		for(String str:parameterValues2){
			odList.add(Integer.parseInt(str));
		}
		for(Integer i:odList){
			orderList.add(odSe.selectByOrderId(i));
			odSe.payOrdId(i, idf.format(new Date()), addId);
		}
		for(OrderTable o:orderList){
			for(OrderInfo odif:o.getOdifList()){
				proSe.buyProduct(odif.getProId(),odif.getProNumber());
			}
		}
		OrderInfo selectByOrderInfoId =orderList.get(0).getOdifList().get(0);
		
		//下面为生成图片
		StringBuilder innerImg=new StringBuilder(request.getSession().getServletContext().getRealPath("/front")).append("/").append((selectByOrderInfoId.getProduct().getProImg()).split(";")[0]);
		String imagName = UUID.randomUUID().toString();
		StringBuilder saveSrc =new StringBuilder(request.getSession().getServletContext().getRealPath("/front/Image/payImage")).append("/").append(imagName).append(".jpg");
		ReceiveAddress selectByReceAddId = reSe.selectByReceAddId(Integer.parseInt(request.getParameter("addressid")));
		StringBuilder context=new StringBuilder("实付款￥").append(request.getParameter("sumcount")).append("\n");
		context.append("寄送至:").append(selectByReceAddId.getRecAddress()).append("\n");
		context.append("收件人:").append(selectByReceAddId.getRecName()).append(selectByReceAddId.getRecPhone());
		try {
			QRCodeUtil.encode(context.toString(), innerImg.toString(), saveSrc.toString(), true);
		} catch (Exception e) {
			e.printStackTrace();
		}
		request.setAttribute("payimage", imagName+".jpg");
		request.getRequestDispatcher("values.jsp").forward(request, response);
	}
	
	/**
	 * 跳转到评价页面
	 * @param request
	 * @param response
	 * @throws IOException 
	 * @throws ServletException 
	 */
	public void gotoEvalute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		int odifId =Integer.parseInt(request.getParameter("odifid"));
		OrderInfo selectByOrderInfoId = odifSe.selectByOrderInfoId(odifId);
		request.setAttribute("odif", selectByOrderInfoId);
		request.getRequestDispatcher("evaluate.jsp").forward(request, response);
	}
	
	/**
	 * 由购物车结算跳到订单支付页面
	 * @param request
	 * @param response
	 * @throws IOException 
	 * @throws ServletException 
	 */
	public void cartToOrder(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		 ArrayList<Integer> orderIdList=(ArrayList<Integer>)request.getAttribute("oderlist");
		 ArrayList<OrderTable> odtableList=new ArrayList<>();
		 for(Integer i:orderIdList){
			 odtableList.add(odSe.selectByOrderId(i));
		 }
		request.setAttribute("odtablelist", odtableList);
		request.getRequestDispatcher("chooseAddress3.jsp").forward(request, response);
	}
	/**
	 * 根据订单id返回订单
	 * @param request
	 * @param response
	 * @throws IOException 
	 * @throws ServletException 
	 */
	public void loadOrderById(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		int orderid=Integer.parseInt(request.getParameter("orderid"));
		OrderTable selectByOrderId = odSe.selectByOrderId(orderid);
		ArrayList<OrderTable> odtableList=new ArrayList<>();
		odtableList.add(selectByOrderId);
		request.setAttribute("odtablelist", odtableList);
		request.getRequestDispatcher("chooseAddress3.jsp").forward(request, response);
	}
	
	/**
	 * 获取未评价的订单
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	public void loadNoEvaluteOrder(HttpServletRequest request, HttpServletResponse response) throws IOException{
		response.setContentType("application/json;charset=utf-8");
		UserInfo user=(UserInfo)request.getSession().getAttribute("user");
		ArrayList<OrderTable> selectByUserId = odSe.selectByUserIdAndNoEvalute(user.getUserId());
		for(OrderTable od:selectByUserId){
			od.setOrdTime(TimeTransfer.timeDelete0(od.getOrdTime()));
		}
		Gson gs=new Gson();
		String json = gs.toJson(selectByUserId);
		response.getWriter().print(json);
	}
	
	/**
	 * 加载某用户的未支付订单
	 * @param request
	 * @param response
	 * @throws IOException 
	 * @throws ServletException 
	 */
	public void loadUnPayOrder(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		//为了测试，查询用户id为1的订单，后期直接用seesion.user获取orderid
		response.setContentType("application/json;charset=utf-8");
		UserInfo user=(UserInfo)request.getSession().getAttribute("user");
		ArrayList<OrderTable> selectByUserId = odSe.selectByUserIdAndOrdStatic(user.getUserId(), "未付款");
		for(OrderTable od:selectByUserId){
			od.setOrdTime(TimeTransfer.timeDelete0(od.getOrdTime()));
		}
		Gson gs=new Gson();
		String json = gs.toJson(selectByUserId);
		response.getWriter().print(json);
	}
	/**
	 * 加载用户的所有订单
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void loadAllOrder(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		//为了测试，查询用户id为1的订单，后期直接用seesion.user获取orderid
		response.setContentType("application/json;charset=utf-8");
		UserInfo user=(UserInfo)request.getSession().getAttribute("user");
		ArrayList<OrderTable> selectByUserId = odSe.selectByUserId(user.getUserId());
		for(OrderTable od:selectByUserId){
			od.setOrdTime(TimeTransfer.timeDelete0(od.getOrdTime()));
		}
		Gson gs=new Gson();
		String json = gs.toJson(selectByUserId);
		response.getWriter().print(json);
	}
	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		// Put your code here
	}

}
